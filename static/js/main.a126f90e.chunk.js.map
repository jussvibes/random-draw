{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","value","target","handleSubmit","state","length","values","toConsumableArray","push","preventDefault","random","alert","concat","Math","floor","react","className","onSubmit","id","type","onChange","htmlFor","name","map","item","data-position","data-tooltip","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA0EeA,qBAtEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQFI,aAAe,SAACC,GACdR,EAAKS,SAAS,CAAEC,MAAOF,EAAMG,OAAOD,SAVxBV,EAadY,aAAe,SAACJ,GACd,GAAIR,EAAKa,MAAMH,MAAMI,OAAS,EAAG,CAC/B,IAAMC,EAAMd,OAAAe,EAAA,EAAAf,CAAOD,EAAKa,MAAME,QACtBL,EAAUV,EAAKa,MAAfH,MAERK,EAAOE,KAAKP,GACZV,EAAKS,SAAS,CAAEC,MAAO,GAAIK,WAE7BP,EAAMU,kBArBMlB,EAwBdmB,OAAS,WACPC,MAAK,0BAAAC,OAA2BrB,EAAKa,MAAME,OAAOO,KAAKC,MAAMD,KAAKH,SAAWG,KAAKC,MAAMvB,EAAKa,MAAME,OAAOD,aAtB1Gd,EAAKa,MAAQ,CACXH,MAAO,GACPK,OAAQ,IALEf,wEA6BZ,OACEwB,EAAA,qBAAKC,UAAU,iBACbD,EAAA,0CAEAA,EAAA,sBAAMC,UAAU,UAAUC,SAAUvB,KAAKS,cACvCY,EAAA,qBAAKC,UAAU,OACbD,EAAA,qBAAKC,UAAU,gCACbD,EAAA,uBAAOG,GAAG,OAAOF,UAAU,WAAWG,KAAK,OAAOlB,MAAOP,KAAKU,MAAMH,MAAOmB,SAAU1B,KAAKI,eAC1FiB,EAAA,uBAAOM,QAAQ,QAAf,UAEFN,EAAA,qBAAKC,UAAU,UACbD,EAAA,wBAAQC,UAAU,+BAA+BG,KAAK,SAASG,KAAK,OAApE,UACEP,EAAA,mBAAGC,UAAU,wBAAb,WAMRD,EAAA,oBAAIC,UAAU,cACXtB,KAAKU,MAAME,OAAOiB,IAAI,SAAAC,GAAI,OACzBT,EAAA,oBAAIC,UAAU,mBAAmBQ,MAIpC9B,KAAKU,MAAME,OAAOD,OAAS,GAC1BU,EAAA,wBACEC,UAAU,gDACVS,gBAAc,SACdC,eAAa,8BACbC,QAASjC,KAAKgB,OACdY,KAAK,QALP,gBAQEP,EAAA,mBAAGC,UAAU,wBAAb,iBA/DMY,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a126f90e.chunk.js","sourcesContent":["import * as React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      values: [],\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  };\n\n  handleSubmit = (event) => {\n    if (this.state.value.length > 0) {\n      const values = [...this.state.values];\n      const { value } = this.state;\n\n      values.push(value);\n      this.setState({ value: '', values });\n    }\n    event.preventDefault();\n  };\n\n  random = () => {\n    alert(`Le grand gagnant est : ${this.state.values[Math.floor(Math.random() * Math.floor(this.state.values.length))]}`);\n  };\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <h3>Tirage au sort</h3>\n\n        <form className=\"col s12\" onSubmit={this.handleSubmit}>\n          <div className=\"row\">\n            <div className=\"input-field col offset-s4 s3\">\n              <input id=\"name\" className=\"validate\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n              <label htmlFor=\"name\">Nom :</label>\n            </div>\n            <div className=\"col s1\">\n              <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"add\">Ajouter\n                <i className=\"material-icons right\">add</i>\n              </button>\n            </div>\n          </div>\n        </form>\n\n        <ul className=\"collection\">\n          {this.state.values.map(item => (\n            <li className=\"collection-item\">{item}</li>\n          ))}\n        </ul>\n\n        {this.state.values.length > 1 && (\n          <button\n            className=\"btn tooltipped waves-effect waves-light pulse\"\n            data-position=\"bottom\"\n            data-tooltip=\"Clique pour tirer au sort !\"\n            onClick={this.random}\n            name=\"draw\"\n          >\n            Tirer au sort\n            <i className=\"material-icons right\">send</i>\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}